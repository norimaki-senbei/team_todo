#!/usr/bin/env node

const app = require('../app');
const displayRoutes = require('express-routemap');

const debug = require('debug')('express-mvc:console');
const repl = require('repl');
const fs = require('fs');
const models = require('../app/models');

function initContext(context) {
  debug('loading app features...');
  context.models = models;
  debug(`"models" loaded on global`);
  context.app = app;
  debug('app features loaded!');

  // TODO: routesメソッドを作ること

  const usage = `
.help commands for show command help
`;
  debug(usage);

  replServer.displayPrompt(false);
}

const replServer = repl.start({ useColors: true });
replServer.defineCommand('routes', {
  help: 'Display routes',
  action() {
    this.clearBufferedCommand();
    displayRoutes(app);
    this.displayPrompt();
  }
});

replServer.on('reset', initContext);
enableHistory(replServer);

initContext(replServer.context);

// @see https://qiita.com/acro5piano/items/dc62b94d7b04505a4aca
function enableHistory(replServer) {
  const replHistoryPath = `${process.env.HOME}/.node_repl_history`;
  if (!fs.existsSync(replHistoryPath)) {
    fs.writeFile(replHistoryPath, '', (err) => {
      if (err) {
        debug(err.stack);
        throw err;
      }
    });
  }

  fs.readFile(replHistoryPath, 'utf8', (err, data) =>
    data.split('\n').forEach(command =>
      replServer.history.push(command)
    )
  );

  replServer.on('exit', () => {
    fs.writeFile(replHistoryPath, replServer.history.join('\n'), err => {
      console.error(err);
      process.exit();
    });
  });
}
